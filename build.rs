use std::env;
use std::path::PathBuf;
use std::fs;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let package_name = env::var("CARGO_PKG_NAME").unwrap();
    
    // Generate C bindings
    let bindings_file = target_dir().join(format!("{}.h", package_name));
    
    let config = cbindgen::Config {
        autogen_warning: Some("/* Auto-generated by cbindgen */".to_string()),
        include_guard: Some("SPACETIMEDB_SERVER_H".to_string()),
        cpp_compat: true,
        documentation: true,
        documentation_style: cbindgen::DocumentationStyle::Doxy,
        language: cbindgen::Language::C,
        ..Default::default()
    };
    
    cbindgen::Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(&bindings_file);
    
    println!("cargo:rerun-if-changed=src/");
    println!("Generated C bindings: {}", bindings_file.display());
    
    // Copy DLL to Unreal project (Windows only)
    #[cfg(target_os = "windows")]
    copy_dll_to_unreal();
}

fn target_dir() -> PathBuf {
    if let Ok(target) = env::var("CARGO_TARGET_DIR") {
        PathBuf::from(target)
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("target")
    }
}

#[cfg(target_os = "windows")]
fn copy_dll_to_unreal() {
    use std::process::Command;
    
    let profile = env::var("PROFILE").unwrap_or_else(|_| "debug".to_string());
    let dll_name = "spacetimedb_server.dll";
    
    let source_dll = target_dir()
        .join(&profile)
        .join(dll_name);
    
    let unreal_binaries = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap())
        .parent()
        .unwrap()
        .join("Binaries")
        .join("Win64");
    
    if source_dll.exists() && unreal_binaries.exists() {
        let dest_dll = unreal_binaries.join(dll_name);
        
        if let Err(e) = fs::copy(&source_dll, &dest_dll) {
            println!("cargo:warning=Failed to copy DLL to Unreal: {}", e);
        } else {
            println!("cargo:warning=Copied DLL to: {}", dest_dll.display());
        }
    }
}